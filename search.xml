<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[曠鄉]]></title>
    <url>%2F20190904%2F1908-gohome%2F</url>
    <content type="text"><![CDATA[八月末，處暑已過，武漢燭日依舊。]]></content>
  </entry>
  <entry>
    <title><![CDATA[当你重装系统时，你在想些什么。]]></title>
    <url>%2F20190524%2Fwindows10-start%2F</url>
    <content type="text"><![CDATA[当要与一台新的电脑开启一段旅程前，需要做些什么。每个人都有自己操作系统的方式，以下是我基于 Windows 10 的一些操作记录。 00 我要让系统达到什么样的效果 打开任何一个应用不要超过2秒。 文件有固定的目录结构，层次清晰（快速找到历史文件）。 桌面不要放文件。 熟悉常用软件的每个功能（量力而为）。 尽量用键盘完成日常操作。 01 准备 在 msdn.itellyou.cn 下载镜像文件 WEPE启动盘（也可以直接硬盘安装） KMS激活工具 常用软件（优选protable，把常用的软件及配置放在移动硬盘，省去不必要的重复与苦嗟） 02 安装系统中的设置启用Administrator用户权限在安装系统的时候，是无法创建 Administrator 用户的，因为系统中已经存在，只是没有启用。以管理员身份打开命令提示符，执行如下命令： 1net user administrator /active:yes 然后注销，选择Administrator用户登录，打开命令提示符，删除之前创建的用户 laoda ，命令如下： 1net user laoda /del 系统激活常用的方式是KMS激活工具，由于系统安全机制过高，会把激活工具识别为病毒程序而隔离。 首先关闭Windows Defender。 运行gpedit命令，依次打开 计算机配置 &gt; 管理模块 &gt; Windows组件 &gt; Windows Defender 防病毒程序 ，然后在右侧打开 关闭 Windows Defender 防病毒程序，点击 已启用选项，然后点击确定即可。 然后把U盘设置为可信息的设备。 依次打开 Windows 安全中心 &gt; 病毒和威胁防护 &gt; &quot;病毒和威胁防护&quot;设置 &gt; 排除项 &gt; 添加或删除排除项，然后把KMS所有的路径添加上即可。 改 Windows 声音方案为无声依次打开 声音控制面板 &gt; 声音选项卡 &gt; 声音方案 选择无声。 隐藏桌面图标依次打开 个性化 &gt; 主题 &gt; 桌面图标设置，然后取消勾选回收站，确定即可。 03 常用软件的安装与配置对软件的几点要求 所有的程序都要安装在 d:\app 或 d:\dev 路径下。 优先安装 protable 版本。 软件要目录名尽量不要加版本号，尽量不要有空格（为快捷方式快捷命令作铺垫）。 创建适用于自己的目录结构1234d:md app\.batch app\.config\Rime dev temp work doc\downloadcd doc\downloadmd nutstore QQ QQBrowser 360Browser WeChat 其它系统设置 设置文件夹选项 取消勾选 隐藏已知文件的扩展名。 添加环境变量 把 D:\app\.batch\ 添加到 Path 中。 添加常用等宽字体 安装 Office 、 Nutstore Office用KMSpico激活。 Nutstore里面放有多个程序的配置文件。 把 .batch 复制到 D:\app\.batch\。 安装 Rime 、 TC 、 VimDesktop 、 Listary Rime 安装时配置文件目录设置为 D:\app\.config\Rime\，把如下配置文件放到此目录下。 12345678910default.custom.yamlpinyin_simp.dict.yamlpinyin_simp.schema.yamlweasel.custom.yamlwubi_pinyin.custom.yamlwubi_pinyin.schema.yamlwubi_trad.schema.yamlwubi86.custom.yamlwubi86.dict.yamlwubi86.schema.yaml Total Commander protable版本直接解压即可。 123D:\app\TotalCMD64\User\User.ini 存放的是自定义目录的配置文件D:\app\TotalCMD64\Wincmd.ini 全局配置文件（不必要）D:\App\TotalCMD64\wcx_ftp.ini FTP链接配置文件（不必要） VimDesktop 直接解压。 把 D:\app\VimDesktop\vimd.exe 快捷方式，放到 %appdata%\Microsoft\Windows\Start Menu\Programs\Startup 目录下以开机自启。 D:\app\VimDesktop\vimd.ahk 文件中主要存放的是VimDesktop的默认程序及自己追加的关于AutoHotKey的便捷定义。 D:\app\VimDesktop\conf\vimd.ini 关联Totacl Command的配置，还有更多的配置信息。 安装 Git 、 VSCode 、 Vim Vim的配置 安装后执行如下命令，安装插件管理工具 Vundle。 1git clone https://github.com/VundleVim/Vundle.vim.git D:/app/Vim/vimfiles/bundle/Vundle.vim 替换配置自己的配置文件 _vimrc。打开 vim，尾行模式执行 :PluginInstall。 安装 QQ 、 WeChat 、 QQBrowser 、 火绒在 qq.pc.com 上下载软件，安装时设置好各路径即可。 QQBrowser登录账号时自动同步插件与书签。 04 开发环境的安装与配置JDK环境变量设置123JAVA_HOME = D:\app\Java\jdk1.8.0_191\PATH = %JAVA_HOME%\binCLASSPATH = .;%JAVA_HOME%\lib\tools.jar; MySQL 05 常用快捷键的配置0500 先要约束 尽量不要使用快捷键来启动应用程序，主要是因为快捷键会冲突。 如果要使用快捷键，要清楚哪些软件会有这个快捷键的设置。 0501 常用快捷应用 glodenedit Alt+S QQ Alt+Q WeChat Alt+W 06 应用的快速启动创建一个 d:\app\.quickstart 目录，在此目录中放入应用程序的快捷方式，*.lnk 格式的文件名长度不要超过4位，然后把此目录加入到环境变量，以后打开应用程序都是通过 Wint+R 的方式。]]></content>
      <tags>
        <tag>system</tag>
        <tag>windows</tag>
        <tag>environmet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[命令学习：sed]]></title>
    <url>%2F20190330%2Fsed%2F</url>
    <content type="text"><![CDATA[示例取一个文本之中两行之间的数据1sed -n '10-30p' readme.md &gt;&gt; tmp.txt head与tail的小技巧123head -n 100 tmp.txt # 显示前100行的数据tail -n 100 tmp.txt # 显示后100行的数据tail -n +100 tmp.txt # 显示100行之后的数据]]></content>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ftp]]></title>
    <url>%2F20190326%2Fftp%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[武汉-春分]]></title>
    <url>%2F20190321%2Fwuhan-chunfen%2F</url>
    <content type="text"><![CDATA[待到七点钟，坐上地铁，到了日常下车的站点才发觉方向错了，时间紧凑，确不如以往急热。回暖的时候来了寒潮，忙得不看时间的时候请假出行，風仿佛要把出行的人兒吹回上個月，來也匆匆去也匆匆，歲也匆匆，月也匆匆，一個人在這個燈火的夜色，久違的感傷也顯得淡泊。]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的故事]]></title>
    <url>%2F20190319%2Fmy-destory%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[常见问题分析]]></title>
    <url>%2F20190319%2Fsystem-win-faq%2F</url>
    <content type="text"><![CDATA[记录一下常见的问题]]></content>
      <tags>
        <tag>faq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在项目中理解数据库三大范式]]></title>
    <url>%2F20190314%2Fthree-normal-form%2F</url>
    <content type="text"><![CDATA[三大范式是对数据库表的约束。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[beonduty]]></title>
    <url>%2F20190313%2Fbeonduty%2F</url>
    <content type="text"><![CDATA[work is boring.]]></content>
  </entry>
  <entry>
    <title><![CDATA[org-guider]]></title>
    <url>%2F20181201%2Forg-guider%2F</url>
    <content type="text"><![CDATA[Org-mode 简明指导 1 介绍** 1.1 前言 compact 简明 guide 向导 preface 前言 plain-text 纯文本 author 写作 literal 文字的 reproducible 可再生的 derivative 衍生 comprehensive 全面的 intend 有意Org是一个用来记笔记，维护TODO清单和做项目计划的快速高效的纯文本模式。它也是一个写作和发布的系统，它支持通过源代码的方式来进行文字编程和重复性研究。这个文档是《comprehensive Org-mode manual》的压缩衍生版本。它包含所有基本的功能与命令，同时拥有可自定义的重要提示。它是为汗颜于200页之巨的手册而折返的初学者而有意准备的。 ** 1.2 安装重要：如果你现在使用的Org版本是Emacs发行版所集成的，请跳过这部分直接看1.3[激活，第1面]部分。如果你已经从网上下载了org发行版的.zip或.tar文件，或者通过Git架构，最好直接在发行版目录中运行它。你需要在Emacs的加载路径下添加lisp子目录。这样做，在.emacs文件中添加下面的行:(setq load-path (cons “~/path/to/orgdir/lisp” load-path))(setq load-path (cons “~/path/to/orgdir/contrib/lisp” load-path))如果你已经通过git或者tar ball获得Org，你需要运行下面的命令来生成自动加载文件。命令：make autoloads ** 1.3 激活 activation 激活 agenda 议程 capure 捕获在你的.emacs配置文件中添加下面的行。最后4行为一些命令定义了热键，你可以设置适合你自己的热键。;; 下面的行是必须的。设置你自己的热键(global-set-key “\C-cl” ‘org-store-link)(global-set-key “\C-ca” ‘org-agenda)(global-set-key “\C-cc” ‘org-capure)(global-set-key “\C-cb” ‘org-switchb) ** 1.4 反馈 feedback 反馈 remark 备注如果你在使用Org时发现问题，或者你对Org有问题、备注或想法，请写邮件到Org的寄送地址emacs-orgmode@gnu.org. 若想知道怎么提交bug报告的更多信息，请查看主手册。 文档结构structure 文档结构outline 大纲flexible 灵活的Org是基于大纲模式前且提供了灵活的命令来编辑文档结构。** 大纲 hierarchical 分级的 representation 表现 overview 总结，概述 achieved 实现 simplifies 简化 functionality 功能性 bound 跳跃 Org是实现在大纲模式之上的。大纲允许用分级的结构来组织一个文档，这是对笔记与思想的最好展现（最少对我来说）。对于这种结构的概述就是通过折叠文档的部分区域来显示主要的文档结构和当前的工作区域。Org通过一个单独的命令来控制全文的显示隐藏极大的简化了大纲的使用，org-cycle命令，它是通过TAB键跳转的。 ** 2.2 大字标题 headlines 大字标题 margin 边缘 footnote 脚注 whitespace 空白 describe 描述 realize 实现大字标题是定义大纲树的结构的。Org中的大字标题是在最左边的区域以星号键开始。例如： * 最高级别的大字标题 ** 第2级别 *** 第3级别 相关文字 *** 第3级别 相关文字 * 另一个最高级别的大字标题 注意，一个在org-footnote-section命令执行后命令的大字标题，会被Footnote初始特殊对待。使用导出功能时拥有大纲功能的子树将会被静默忽略。 ** 2.3 可见的循环]]></content>
      <categories>
        <category>Translate</category>
      </categories>
      <tags>
        <tag>org-mode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[古寒日课]]></title>
    <url>%2F20181130%2Fnonsense%2F</url>
    <content type="text"><![CDATA[2018-11-29 复习Java对象与类相关的知识，只是看没有总结。好多东西只有理解了实现原理才会真正记忆，只是一时致用的话，只会劳神费时。 承包商评价的日常运维，处理ERP2EAM接口的问题，上班时间基本在摸鱼。 腹部初级按两倍的量来做的，身体疲惫后也显得轻松，明天可以做腹部中级。 看了一个安全大佬的日记，很受感染，一时意气喷薄。感觉自己好渺小呀，就是一个菜鸡。人是应该被孤立而存在的。 2018-11-30 看corejava 打算翻译下简明的org-mode操作手册，大概40页。下周末完成吧。刚才安装了个Hexo的org-mode的插件，文件是创建成了，但是生成博客的时候有问题，本来是想以后用org写博客呢，今天就不先搞了。 今天真的是在摸鱼呀，啊啊啊啊。。。还有乱七八糟的事。 腹部中级搞成胸部中级，搞的稀碎，胡亂路過，以後晚飯不能吃的太飽了。 明天把書上的代碼敲一遍，然後整理下vim的相關文件吧。 2018-12-01 今天幾乎什麼也沒有做，看了兩個電影。 2018-12-02 今天同昨天一樣，什麼也沒有做，工作日的時候希望星期天可以多做些功課，到了週末就什麼也不會去做。這種循環真的很可怕呀。 2018-12-03~2018-12-07 哇，時間過得好快呀，就像一張白紙落滿灰塵，就是時間走過的痕跡呀。5天過去了，這周主要在做一個小信封定時提醒的功能，Maximo7版本上有個corntask的功能，只需要關聯一個類就可以觸發定時任務。主要是對JDBC操作，我搞了兩天，真的好慢呀，好多東西看過不用就會很快的忘記的。]]></content>
      <categories>
        <category>dream</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 学习记录]]></title>
    <url>%2F20181114%2Fgit-manual%2F</url>
    <content type="text"><![CDATA[git简单模块划分 工作区 缓存区 本地仓库 远程仓库 创建本地仓库 在创建仓库之前首先配置用户信息 12345678910git config --global user.name "noocl"git config --global user.email "songci1106@live.com" # 这个是github帐户git config --global --list # 查看全局配置mkdir repo-democd repo-demogit init # 初始化本地仓库echo "repo-demo content" &gt; readme.mdgit add readme.md # 把工作区修改的文件添加到缓存区git commmit -m "first commit" # 把缓冲区的文件添加到版本库（本地仓库）git status # 查看仓库状态 把暂存区的文件恢复到工作区1234echo "cache content" &gt;&gt; readme.mdgit add readme.mdgit reset HEAD readme.md # 这步时readme.md的内容还没有回退git checkout -- readme.md # 这步时内容进行回退 回退版本12345678echo "version content" &gt;&gt; readme.mdgit add readme.mdgit commit -m "second commit"git log # 查看所有版本git reset --hard 版本号 # 回退到相应的版本清空本地仓库git rm readme.md # 清空本地仓库文件git commit -m "delete readme.md" # 提交 本地仓库与远程仓库进行关联1234ssh-keygen -t rsa -C "songci1106@live.com" # 创建 SSH Keycat ~/.ssh/id_rsa.pub # 打印密钥# 登录github，把生成的密钥与github帐户进行绑定ssh -T git@github.com # 检测本地与github能否连通 添加远程仓库 先在github上面新建一个新仓库remote-demo。 123456789101112mkdir remote-demo &amp;&amp; mv remote-demogit init echo "remote-demo content" &gt; readme.mdgit add readme.mdgit commit -m "first commit"git remote add origin git@github.com:noocl/remote-demo.git # 本地仓库的与github仓库的进行关联## git pull origin master [--allow-unrelated-histories] # 提交到远程仓库git push -u origin master # 提交到远程仓库echo "add new line content" &gt;&gt; readme.mdgit add readme.mdgit commit -m "second commit"git push # 第2次，直接提交 克隆仓库 先在github上面创建一个仓库clone-demo 123456git clone git@github.com:noocl/clone-demo.git # 把远程仓库克隆到本地cd clone-demoecho "clone-demo" &gt; readme.mdgit add readme.mdgit commit -m "first commit"git push # 从本地仓库提交到远程仓库，直接push 标签管理 前提：先在github上面创建一个远程仓库tag-demo 1234567891011mkdir tag-demo &amp;&amp; cd tag-demoecho "tag-demo content" &gt; readme.mdgit add readme.mdgit commit -m "first commit"git remote add origin git@github.com:noocl/tag-demo.git # 与远程仓库进行关联git push -u origin master # 提交到远程仓库git tag v1.0.1 # 创建标签git tag # 查看所有标签git push origin v1.0.1 # 把标签提交到远程仓库git tag -d v1.0.1 # 删除本地仓库标签git push origin :refs/tags/v1.0.1 # 删除远程仓库标签 分支管理123456789101112131415mkdir branch-demo &amp;&amp; cd branch-demogit init echo "branch-demo content" &gt; readme.mdgit add readme.mdgit commit -m "first commit"git branch br01 # 创建分支git branch # 查看分支，行首的*表示当前分支git checkout br01 # 切换分支echo "br01 content" &gt;&gt; readme.mdgit add readme.mdgit commit -m "branch commit"# 现在要开始把tr01分支合并到master分支上，首先要切回到master分支git checkout mastergit merge br01git branch -d br01 # 删除分支]]></content>
      <categories>
        <category>map</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github pages + Hexo 搭建博客]]></title>
    <url>%2F20181104%2Fgithub-pages%2F</url>
    <content type="text"><![CDATA[准备工作 node 用来生成静态页面。 npm nodejs的包管理器，用来安装hexo-cli。 git 把本地的Hexo内容提交到github github 用来做Hexo的远程仓库，域名，服务器。 个人域名 github pages的默认域名是：yourname.github.io，如有闲置域名可以进行解析绑定。 安装Hexo12345npm install hexo-cli -gmkdir ~/Documents/hexoblogcd hexobloghexo initnpm install 安装next主题1git clone https://github.com/theme-next/hexo-theme-next themes/next 博客配置文件配置文件：_config.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 式微subtitle: 年与时驰 意与志去 遂成枯落 多不接世description: 干，干他，干他妈的！keywords:author: 非略language: zh-CNtimezone: Asia/Shanghai# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://www.cpucsi.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = '')# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: '' per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# ongc search configsearch: path: search.xml field: post format: html limit: 10000# ongc rss configplugins: hexo-generate-feed# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/noocl/noocl.github.io.gitbrachanc: master 配置本地git帐户信息12git config --global user.name "noocl"git config --global user.email "songci1106@live.com" 本地生成ssh keys1ssh-keygen -t rsa -C "songci1106@live.com" 添加ssh key 到 github 对应账号1ccat ~/.ssh/id_rsa.pub 验证keys是否成功12ssh -T git@github.com# 输入yes，出现successfully时表示成功。 添加CNAME解析文件123456vim ~/Documents/hexoblog/source/CNAMESwww.cpucsi.com# 当删除CNAMES文件重新生成静态文件部署时，还是会跳转到解析的域名，清除缓存再操作即可hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo g # 生成缓存和静态文件hexo d # 重新部署到服务器 生成静态文件12hexo generate# 如果这里报错：无法连接git或找不到git，请执行npm install hexo-deployer-git --save 启动本地服务123hexo server输入localhost:4000即可查看博客-p,--port 设置本地服务指定端口 部署到github12hexo deploy# -g,--generate 在部署之前先生成静态文件]]></content>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
</search>
